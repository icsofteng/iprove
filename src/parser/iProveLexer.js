// Generated from src/parser/iProve.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0002*\u00ec\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0003",
    "\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\f",
    "\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0014\u0003",
    "\u0014\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0017\u0003",
    "\u0017\u0003\u0018\u0003\u0018\u0003\u0019\u0006\u0019\u00b7\n\u0019",
    "\r\u0019\u000e\u0019\u00b8\u0003\u001a\u0003\u001a\u0003\u001b\u0003",
    "\u001b\u0003\u001c\u0006\u001c\u00c0\n\u001c\r\u001c\u000e\u001c\u00c1",
    "\u0003\u001d\u0007\u001d\u00c5\n\u001d\f\u001d\u000e\u001d\u00c8\u000b",
    "\u001d\u0003\u001d\u0003\u001d\u0006\u001d\u00cc\n\u001d\r\u001d\u000e",
    "\u001d\u00cd\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003 \u0003 \u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0003#\u0003",
    "#\u0003$\u0003$\u0003%\u0003%\u0003&\u0003&\u0003\'\u0003\'\u0003(\u0003",
    "(\u0003)\u0003)\u0003)\u0003)\u0002\u0002*\u0003\u0003\u0005\u0004\u0007",
    "\u0005\t\u0006\u000b\u0007\r\b\u000f\t\u0011\n\u0013\u000b\u0015\f\u0017",
    "\r\u0019\u000e\u001b\u000f\u001d\u0010\u001f\u0011!\u0012#\u0013%\u0014",
    "\'\u0015)\u0016+\u0017-\u0018/\u00191\u001a3\u001b5\u001c7\u001d9\u001e",
    ";\u001f= ?!A\"C#E$G%I&K\'M(O)Q*\u0003\u0002\b\u0003\u0002c|\u0003\u0002",
    "C\\\u0004\u0002C\\c|\u0003\u00022;\u0003\u000200\u0005\u0002\u000b\f",
    "\u000f\u000f\"\"\u0002\u00ef\u0002\u0003\u0003\u0002\u0002\u0002\u0002",
    "\u0005\u0003\u0002\u0002\u0002\u0002\u0007\u0003\u0002\u0002\u0002\u0002",
    "\t\u0003\u0002\u0002\u0002\u0002\u000b\u0003\u0002\u0002\u0002\u0002",
    "\r\u0003\u0002\u0002\u0002\u0002\u000f\u0003\u0002\u0002\u0002\u0002",
    "\u0011\u0003\u0002\u0002\u0002\u0002\u0013\u0003\u0002\u0002\u0002\u0002",
    "\u0015\u0003\u0002\u0002\u0002\u0002\u0017\u0003\u0002\u0002\u0002\u0002",
    "\u0019\u0003\u0002\u0002\u0002\u0002\u001b\u0003\u0002\u0002\u0002\u0002",
    "\u001d\u0003\u0002\u0002\u0002\u0002\u001f\u0003\u0002\u0002\u0002\u0002",
    "!\u0003\u0002\u0002\u0002\u0002#\u0003\u0002\u0002\u0002\u0002%\u0003",
    "\u0002\u0002\u0002\u0002\'\u0003\u0002\u0002\u0002\u0002)\u0003\u0002",
    "\u0002\u0002\u0002+\u0003\u0002\u0002\u0002\u0002-\u0003\u0002\u0002",
    "\u0002\u0002/\u0003\u0002\u0002\u0002\u00021\u0003\u0002\u0002\u0002",
    "\u00023\u0003\u0002\u0002\u0002\u00025\u0003\u0002\u0002\u0002\u0002",
    "7\u0003\u0002\u0002\u0002\u00029\u0003\u0002\u0002\u0002\u0002;\u0003",
    "\u0002\u0002\u0002\u0002=\u0003\u0002\u0002\u0002\u0002?\u0003\u0002",
    "\u0002\u0002\u0002A\u0003\u0002\u0002\u0002\u0002C\u0003\u0002\u0002",
    "\u0002\u0002E\u0003\u0002\u0002\u0002\u0002G\u0003\u0002\u0002\u0002",
    "\u0002I\u0003\u0002\u0002\u0002\u0002K\u0003\u0002\u0002\u0002\u0002",
    "M\u0003\u0002\u0002\u0002\u0002O\u0003\u0002\u0002\u0002\u0002Q\u0003",
    "\u0002\u0002\u0002\u0003S\u0003\u0002\u0002\u0002\u0005X\u0003\u0002",
    "\u0002\u0002\u0007_\u0003\u0002\u0002\u0002\tf\u0003\u0002\u0002\u0002",
    "\u000bm\u0003\u0002\u0002\u0002\rt\u0003\u0002\u0002\u0002\u000fy\u0003",
    "\u0002\u0002\u0002\u0011}\u0003\u0002\u0002\u0002\u0013\u0081\u0003",
    "\u0002\u0002\u0002\u0015\u0084\u0003\u0002\u0002\u0002\u0017\u008c\u0003",
    "\u0002\u0002\u0002\u0019\u008f\u0003\u0002\u0002\u0002\u001b\u0092\u0003",
    "\u0002\u0002\u0002\u001d\u0096\u0003\u0002\u0002\u0002\u001f\u009a\u0003",
    "\u0002\u0002\u0002!\u009e\u0003\u0002\u0002\u0002#\u00a3\u0003\u0002",
    "\u0002\u0002%\u00a9\u0003\u0002\u0002\u0002\'\u00ab\u0003\u0002\u0002",
    "\u0002)\u00ad\u0003\u0002\u0002\u0002+\u00af\u0003\u0002\u0002\u0002",
    "-\u00b1\u0003\u0002\u0002\u0002/\u00b3\u0003\u0002\u0002\u00021\u00b6",
    "\u0003\u0002\u0002\u00023\u00ba\u0003\u0002\u0002\u00025\u00bc\u0003",
    "\u0002\u0002\u00027\u00bf\u0003\u0002\u0002\u00029\u00c6\u0003\u0002",
    "\u0002\u0002;\u00cf\u0003\u0002\u0002\u0002=\u00d1\u0003\u0002\u0002",
    "\u0002?\u00d4\u0003\u0002\u0002\u0002A\u00d6\u0003\u0002\u0002\u0002",
    "C\u00d9\u0003\u0002\u0002\u0002E\u00dc\u0003\u0002\u0002\u0002G\u00de",
    "\u0003\u0002\u0002\u0002I\u00e0\u0003\u0002\u0002\u0002K\u00e2\u0003",
    "\u0002\u0002\u0002M\u00e4\u0003\u0002\u0002\u0002O\u00e6\u0003\u0002",
    "\u0002\u0002Q\u00e8\u0003\u0002\u0002\u0002ST\u0007e\u0002\u0002TU\u0007",
    "c\u0002\u0002UV\u0007u\u0002\u0002VW\u0007g\u0002\u0002W\u0004\u0003",
    "\u0002\u0002\u0002XY\u0007c\u0002\u0002YZ\u0007u\u0002\u0002Z[\u0007",
    "u\u0002\u0002[\\\u0007w\u0002\u0002\\]\u0007o\u0002\u0002]^\u0007g\u0002",
    "\u0002^\u0006\u0003\u0002\u0002\u0002_`\u0007h\u0002\u0002`a\u0007q",
    "\u0002\u0002ab\u0007t\u0002\u0002bc\u0007c\u0002\u0002cd\u0007n\u0002",
    "\u0002de\u0007n\u0002\u0002e\b\u0003\u0002\u0002\u0002fg\u0007f\u0002",
    "\u0002gh\u0007g\u0002\u0002hi\u0007h\u0002\u0002ij\u0007k\u0002\u0002",
    "jk\u0007p\u0002\u0002kl\u0007g\u0002\u0002l\n\u0003\u0002\u0002\u0002",
    "mn\u0007g\u0002\u0002no\u0007z\u0002\u0002op\u0007k\u0002\u0002pq\u0007",
    "u\u0002\u0002qr\u0007v\u0002\u0002rs\u0007u\u0002\u0002s\f\u0003\u0002",
    "\u0002\u0002tu\u0007g\u0002\u0002uv\u0007z\u0002\u0002vw\u0007k\u0002",
    "\u0002wx\u0007v\u0002\u0002x\u000e\u0003\u0002\u0002\u0002yz\u0007p",
    "\u0002\u0002z{\u0007q\u0002\u0002{|\u0007v\u0002\u0002|\u0010\u0003",
    "\u0002\u0002\u0002}~\u0007c\u0002\u0002~\u007f\u0007p\u0002\u0002\u007f",
    "\u0080\u0007f\u0002\u0002\u0080\u0012\u0003\u0002\u0002\u0002\u0081",
    "\u0082\u0007q\u0002\u0002\u0082\u0083\u0007t\u0002\u0002\u0083\u0014",
    "\u0003\u0002\u0002\u0002\u0084\u0085\u0007k\u0002\u0002\u0085\u0086",
    "\u0007o\u0002\u0002\u0086\u0087\u0007r\u0002\u0002\u0087\u0088\u0007",
    "n\u0002\u0002\u0088\u0089\u0007k\u0002\u0002\u0089\u008a\u0007g\u0002",
    "\u0002\u008a\u008b\u0007u\u0002\u0002\u008b\u0016\u0003\u0002\u0002",
    "\u0002\u008c\u008d\u0007?\u0002\u0002\u008d\u008e\u0007@\u0002\u0002",
    "\u008e\u0018\u0003\u0002\u0002\u0002\u008f\u0090\u0007/\u0002\u0002",
    "\u0090\u0091\u0007@\u0002\u0002\u0091\u001a\u0003\u0002\u0002\u0002",
    "\u0092\u0093\u0007k\u0002\u0002\u0093\u0094\u0007h\u0002\u0002\u0094",
    "\u0095\u0007h\u0002\u0002\u0095\u001c\u0003\u0002\u0002\u0002\u0096",
    "\u0097\u0007>\u0002\u0002\u0097\u0098\u0007?\u0002\u0002\u0098\u0099",
    "\u0007@\u0002\u0002\u0099\u001e\u0003\u0002\u0002\u0002\u009a\u009b",
    "\u0007>\u0002\u0002\u009b\u009c\u0007/\u0002\u0002\u009c\u009d\u0007",
    "@\u0002\u0002\u009d \u0003\u0002\u0002\u0002\u009e\u009f\u0007v\u0002",
    "\u0002\u009f\u00a0\u0007t\u0002\u0002\u00a0\u00a1\u0007w\u0002\u0002",
    "\u00a1\u00a2\u0007g\u0002\u0002\u00a2\"\u0003\u0002\u0002\u0002\u00a3",
    "\u00a4\u0007h\u0002\u0002\u00a4\u00a5\u0007c\u0002\u0002\u00a5\u00a6",
    "\u0007n\u0002\u0002\u00a6\u00a7\u0007u\u0002\u0002\u00a7\u00a8\u0007",
    "g\u0002\u0002\u00a8$\u0003\u0002\u0002\u0002\u00a9\u00aa\u0007*\u0002",
    "\u0002\u00aa&\u0003\u0002\u0002\u0002\u00ab\u00ac\u0007+\u0002\u0002",
    "\u00ac(\u0003\u0002\u0002\u0002\u00ad\u00ae\u0007]\u0002\u0002\u00ae",
    "*\u0003\u0002\u0002\u0002\u00af\u00b0\u0007_\u0002\u0002\u00b0,\u0003",
    "\u0002\u0002\u0002\u00b1\u00b2\t\u0002\u0002\u0002\u00b2.\u0003\u0002",
    "\u0002\u0002\u00b3\u00b4\t\u0003\u0002\u0002\u00b40\u0003\u0002\u0002",
    "\u0002\u00b5\u00b7\t\u0004\u0002\u0002\u00b6\u00b5\u0003\u0002\u0002",
    "\u0002\u00b7\u00b8\u0003\u0002\u0002\u0002\u00b8\u00b6\u0003\u0002\u0002",
    "\u0002\u00b8\u00b9\u0003\u0002\u0002\u0002\u00b92\u0003\u0002\u0002",
    "\u0002\u00ba\u00bb\u0007.\u0002\u0002\u00bb4\u0003\u0002\u0002\u0002",
    "\u00bc\u00bd\u0007<\u0002\u0002\u00bd6\u0003\u0002\u0002\u0002\u00be",
    "\u00c0\t\u0005\u0002\u0002\u00bf\u00be\u0003\u0002\u0002\u0002\u00c0",
    "\u00c1\u0003\u0002\u0002\u0002\u00c1\u00bf\u0003\u0002\u0002\u0002\u00c1",
    "\u00c2\u0003\u0002\u0002\u0002\u00c28\u0003\u0002\u0002\u0002\u00c3",
    "\u00c5\t\u0005\u0002\u0002\u00c4\u00c3\u0003\u0002\u0002\u0002\u00c5",
    "\u00c8\u0003\u0002\u0002\u0002\u00c6\u00c4\u0003\u0002\u0002\u0002\u00c6",
    "\u00c7\u0003\u0002\u0002\u0002\u00c7\u00c9\u0003\u0002\u0002\u0002\u00c8",
    "\u00c6\u0003\u0002\u0002\u0002\u00c9\u00cb\t\u0006\u0002\u0002\u00ca",
    "\u00cc\t\u0005\u0002\u0002\u00cb\u00ca\u0003\u0002\u0002\u0002\u00cc",
    "\u00cd\u0003\u0002\u0002\u0002\u00cd\u00cb\u0003\u0002\u0002\u0002\u00cd",
    "\u00ce\u0003\u0002\u0002\u0002\u00ce:\u0003\u0002\u0002\u0002\u00cf",
    "\u00d0\u0007>\u0002\u0002\u00d0<\u0003\u0002\u0002\u0002\u00d1\u00d2",
    "\u0007>\u0002\u0002\u00d2\u00d3\u0007?\u0002\u0002\u00d3>\u0003\u0002",
    "\u0002\u0002\u00d4\u00d5\u0007@\u0002\u0002\u00d5@\u0003\u0002\u0002",
    "\u0002\u00d6\u00d7\u0007@\u0002\u0002\u00d7\u00d8\u0007?\u0002\u0002",
    "\u00d8B\u0003\u0002\u0002\u0002\u00d9\u00da\u0007?\u0002\u0002\u00da",
    "\u00db\u0007?\u0002\u0002\u00dbD\u0003\u0002\u0002\u0002\u00dc\u00dd",
    "\u0007-\u0002\u0002\u00ddF\u0003\u0002\u0002\u0002\u00de\u00df\u0007",
    "/\u0002\u0002\u00dfH\u0003\u0002\u0002\u0002\u00e0\u00e1\u0007`\u0002",
    "\u0002\u00e1J\u0003\u0002\u0002\u0002\u00e2\u00e3\u0007,\u0002\u0002",
    "\u00e3L\u0003\u0002\u0002\u0002\u00e4\u00e5\u00071\u0002\u0002\u00e5",
    "N\u0003\u0002\u0002\u0002\u00e6\u00e7\u00070\u0002\u0002\u00e7P\u0003",
    "\u0002\u0002\u0002\u00e8\u00e9\t\u0007\u0002\u0002\u00e9\u00ea\u0003",
    "\u0002\u0002\u0002\u00ea\u00eb\b)\u0002\u0002\u00ebR\u0003\u0002\u0002",
    "\u0002\u0007\u0002\u00b8\u00c1\u00c6\u00cd\u0003\b\u0002\u0002"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

function iProveLexer(input) {
	antlr4.Lexer.call(this, input);
    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    return this;
}

iProveLexer.prototype = Object.create(antlr4.Lexer.prototype);
iProveLexer.prototype.constructor = iProveLexer;

Object.defineProperty(iProveLexer.prototype, "atn", {
        get : function() {
                return atn;
        }
});

iProveLexer.EOF = antlr4.Token.EOF;
iProveLexer.CASE = 1;
iProveLexer.ASSUME = 2;
iProveLexer.FORALL = 3;
iProveLexer.DEFINE = 4;
iProveLexer.EXISTS = 5;
iProveLexer.EXIT = 6;
iProveLexer.NOT = 7;
iProveLexer.AND = 8;
iProveLexer.OR = 9;
iProveLexer.IMPLIES = 10;
iProveLexer.IMPLIES2 = 11;
iProveLexer.IMPLIES3 = 12;
iProveLexer.IFF = 13;
iProveLexer.IFF2 = 14;
iProveLexer.IFF3 = 15;
iProveLexer.TRUE = 16;
iProveLexer.FALSE = 17;
iProveLexer.BRACKET_OPEN = 18;
iProveLexer.BRACKET_CLOSE = 19;
iProveLexer.SQ_BRACKET_OPEN = 20;
iProveLexer.SQ_BRACKET_CLOSE = 21;
iProveLexer.VARIABLE = 22;
iProveLexer.ATOM = 23;
iProveLexer.IDENTIFIER = 24;
iProveLexer.COMMA = 25;
iProveLexer.COLON = 26;
iProveLexer.INTEGER = 27;
iProveLexer.REAL = 28;
iProveLexer.LESSTHAN = 29;
iProveLexer.LESSTHANEQ = 30;
iProveLexer.GREATERTHAN = 31;
iProveLexer.GREATERTHANEQ = 32;
iProveLexer.DOUBLEEQUALS = 33;
iProveLexer.PLUS = 34;
iProveLexer.MINUS = 35;
iProveLexer.POWER = 36;
iProveLexer.MULTIPLY = 37;
iProveLexer.DIVIDE = 38;
iProveLexer.POINT = 39;
iProveLexer.WS = 40;

iProveLexer.prototype.channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];

iProveLexer.prototype.modeNames = [ "DEFAULT_MODE" ];

iProveLexer.prototype.literalNames = [ null, "'case'", "'assume'", "'forall'", 
                                       "'define'", "'exists'", "'exit'", 
                                       "'not'", "'and'", "'or'", "'implies'", 
                                       "'=>'", "'->'", "'iff'", "'<=>'", 
                                       "'<->'", "'true'", "'false'", "'('", 
                                       "')'", "'['", "']'", null, null, 
                                       null, "','", "':'", null, null, "'<'", 
                                       "'<='", "'>'", "'>='", "'=='", "'+'", 
                                       "'-'", "'^'", "'*'", "'/'", "'.'" ];

iProveLexer.prototype.symbolicNames = [ null, "CASE", "ASSUME", "FORALL", 
                                        "DEFINE", "EXISTS", "EXIT", "NOT", 
                                        "AND", "OR", "IMPLIES", "IMPLIES2", 
                                        "IMPLIES3", "IFF", "IFF2", "IFF3", 
                                        "TRUE", "FALSE", "BRACKET_OPEN", 
                                        "BRACKET_CLOSE", "SQ_BRACKET_OPEN", 
                                        "SQ_BRACKET_CLOSE", "VARIABLE", 
                                        "ATOM", "IDENTIFIER", "COMMA", "COLON", 
                                        "INTEGER", "REAL", "LESSTHAN", "LESSTHANEQ", 
                                        "GREATERTHAN", "GREATERTHANEQ", 
                                        "DOUBLEEQUALS", "PLUS", "MINUS", 
                                        "POWER", "MULTIPLY", "DIVIDE", "POINT", 
                                        "WS" ];

iProveLexer.prototype.ruleNames = [ "CASE", "ASSUME", "FORALL", "DEFINE", 
                                    "EXISTS", "EXIT", "NOT", "AND", "OR", 
                                    "IMPLIES", "IMPLIES2", "IMPLIES3", "IFF", 
                                    "IFF2", "IFF3", "TRUE", "FALSE", "BRACKET_OPEN", 
                                    "BRACKET_CLOSE", "SQ_BRACKET_OPEN", 
                                    "SQ_BRACKET_CLOSE", "VARIABLE", "ATOM", 
                                    "IDENTIFIER", "COMMA", "COLON", "INTEGER", 
                                    "REAL", "LESSTHAN", "LESSTHANEQ", "GREATERTHAN", 
                                    "GREATERTHANEQ", "DOUBLEEQUALS", "PLUS", 
                                    "MINUS", "POWER", "MULTIPLY", "DIVIDE", 
                                    "POINT", "WS" ];

iProveLexer.prototype.grammarFileName = "iProve.g4";



exports.iProveLexer = iProveLexer;

